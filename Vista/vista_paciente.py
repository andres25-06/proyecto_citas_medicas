# -- coding: utf-8 --
"""
Vista del M√≥dulo de Pacientes con selector interactivo (flechas ‚Üë ‚Üì).
"""

import os
import readchar
from Modelo import paciente
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.prompt import Prompt, IntPrompt, Confirm
from Vista.vista_principal import vista_principal 

console = Console()

DIRECTORIO_DATOS = 'data'
NOMBRE_ARCHIVO_CSV = 'pacientes.csv'
NOMBRE_ARCHIVO_JSON = 'pacientes.json'


def solicitar_tipo_documento(permitir_vacio: bool = False) -> str | None:
    """
    Solicita al usuario seleccionar un tipo de documento.
    Args:
        permitir_vacio (bool): Si es True, permite no seleccionar ning√∫n tipo (retorna None).
    Returns:
        str | None: El tipo de documento seleccionado o None si se permite vac√≠o y se elige esa opci√≥n.
    """
    console.print("\nSeleccione el tipo de documento:", style="cyan")
    tipos = {
        '1': 'C.C', '2': 'T.I', '3': 'R.C', '4': 'C.E', '5': 'Pasaporte', '6': 'PPT'
    }
    descripciones = {
        '1': 'C√©dula de Ciudadan√≠a', '2': 'Tarjeta de Identidad', '3': 'Registro Civil',
        '4': 'C√©dula de Extranjer√≠a', '5': 'Pasaporte', '6': 'Permiso de Permanencia Temporal'
    }

    opciones = list(tipos.keys())
    texto = ""

    if permitir_vacio:
        texto += "[bold yellow]0[/bold yellow]. No cambiar\n"
        opciones.insert(0, '0')

    for k, v in descripciones.items():
        texto += f"[bold yellow]{k}[/bold yellow]. {v}\n"

    console.print(texto)
    opcion = Prompt.ask("Opci√≥n", choices=opciones, show_choices=False)
    if permitir_vacio and opcion == '0':
        return None
    return tipos[opcion]


def elegir_almacenamiento() -> str:
    """
    Elegir el tipo de almacenamiento (CSV o JSON) para los datos de pacientes.
    Args:
        none    
    Returns:
        str: Ruta al archivo seleccionado.
    """
    console.print(Panel.fit("[bold cyan]‚öô Configuraci√≥n de Almacenamiento[/bold cyan]"))
    console.print(
        "¬øD√≥nde desea almacenar los datos?\n"
        "[bold yellow]1[/bold yellow]. üìÑ CSV (Archivo de texto plano)\n"
        "[bold yellow]2[/bold yellow]. üßæ JSON (Formato estructurado)\n"
        "[bold yellow]3[/bold yellow]. üîô Volver al men√∫ principal"
    )

    opcion = Prompt.ask(
        "Seleccione una opci√≥n",
        choices=["1", "2", "3"],
        show_choices=False
    )
    

    if opcion == "1":
        return os.path.join(DIRECTORIO_DATOS, NOMBRE_ARCHIVO_CSV)
    elif opcion == "2":
        return os.path.join(DIRECTORIO_DATOS, NOMBRE_ARCHIVO_JSON)
    elif opcion == "3":
        console.print("[bold red]‚Ü© Regresando al men√∫ principal...[/bold red]")
        vista_principal() 
        return None


def limpiar():
    os.system("cls" if os.name == "nt" else "clear")


# =========================================================
# üîπ Selector Interactivo
# =========================================================
def selector_interactivo(titulo, opciones):
    """"
    Permite navegar con flechas ‚Üë ‚Üì y seleccionar con Enter.
    
    Args:
        titulo (str): T√≠tulo del men√∫.
        opciones (List[str]): Lista de opciones para mostrar.
    Returns:
        int: √çndice de la opci√≥n seleccionada.
    """
    seleccion = 0
    while True:
        limpiar()
        console.print(Panel(f"[bold cyan]{titulo}[/bold cyan]"))
        for i, opt in enumerate(opciones):
            prefix = "üëâ " if i == seleccion else "   "
            # Verde para opciones normales, rojo si es ‚Äúvolver‚Äù
            if "Volver" in opt:
                estilo = "reverse bold red" if i == seleccion else "bold red"
            else:
                estilo = "reverse bold green" if i == seleccion else ""
            console.print(prefix + opt, style=estilo)

        tecla = readchar.readkey()
        if tecla == readchar.key.UP:
            seleccion = (seleccion - 1) % len(opciones)
        elif tecla == readchar.key.DOWN:
            seleccion = (seleccion + 1) % len(opciones)
        elif tecla == readchar.key.ENTER:
            return seleccion


# =========================================================
# üîπ Funciones del M√≥dulo de Pacientes
# =========================================================
def menu_crear_paciente(filepath: str):
    """
    Esta funci√≥n permite registrar un nuevo paciente.
    
    Args:
        filepath (str): La ruta al archivo donde se almacenan los pacientes.
    Returns:
        none
    
    """
    console.print(Panel.fit("[bold cyan]üìù Registrar Nuevo Paciente[/bold cyan]"))

    tipo_documento = solicitar_tipo_documento()
    documento = IntPrompt.ask("N√∫mero de Documento")
    nombres = Prompt.ask("Nombres")
    apellidos = Prompt.ask("Apellidos")
    direccion = Prompt.ask("Direcci√≥n")
    telefono = IntPrompt.ask("Tel√©fono")

    paciente_creado = paciente.crear_paciente(
        filepath, tipo_documento, documento, nombres, apellidos, direccion, telefono
    )

    if paciente_creado:
        console.print(Panel(
            f"‚úÖ ¬°Paciente registrado con √©xito!\nID Asignado: [bold yellow]{paciente_creado['id']}[/bold yellow]",
            border_style="green", title="√âxito"
        ))
    else:
        console.print(Panel("‚ö† No se pudo registrar el paciente.", border_style="red", title="Error"))
    input("\nPresione Enter para continuar...")


def menu_leer_pacientes(filepath: str):
    
    """
    Men√∫ para ver todos los pacientes registrados.
    
    Args:
        filepath (str): La ruta al archivo donde se almacenan los pacientes.
    Returns:
        none
    """
    console.print(Panel.fit("[bold cyan]üë• Lista de Pacientes[/bold cyan]"))
    pacientes = paciente.leer_todos_los_pacientes(filepath)

    if not pacientes:
        console.print("[yellow]No hay pacientes registrados.[/yellow]")
        input("\nPresione Enter para continuar...")
        return

    tabla = Table(title="Pacientes Registrados", border_style="blue", show_header=True, header_style="bold magenta")
    tabla.add_column("ID", style="dim", width=5)
    tabla.add_column("Tipo Doc.", justify="center")
    tabla.add_column("Documento", justify="center")
    tabla.add_column("Nombre Completo")
    tabla.add_column("Tel√©fono", justify="center")
    tabla.add_column("Direcci√≥n", justify="center")

    for p in pacientes:
        tabla.add_row(
            p['id'], p['tipo_documento'], p['documento'],
            f"{p['nombres']} {p['apellidos']}",
            p['telefono'], p['direccion']
        )

    console.print(tabla)
    input("\nPresione Enter para continuar...")


def menu_actualizar_paciente(filepath: str):
    """
    Est√° funci√≥n permite actualizar los datos de un paciente existente.
    
    Args:
        filepath (str): La ruta al archivo donde se almacenan los pacientes.
    Returns:        
        none
    """
    console.print(Panel.fit("[bold cyan]‚úè Actualizar Datos de Paciente[/bold cyan]"))
    documento = IntPrompt.ask("Ingrese el Documento del paciente a actualizar")

    paciente_actual = paciente.buscar_paciente_por_documento(filepath, str(documento))
    if not paciente_actual:
        console.print("\n[bold red]‚ùå No se encontr√≥ el paciente.[/bold red]")
        input("\nPresione Enter para continuar...")
        return

    console.print("\nPresione Enter para no modificar un campo.")
    datos_nuevos = {}

    nuevo_tipo_doc = solicitar_tipo_documento(permitir_vacio=True)
    if nuevo_tipo_doc:
        datos_nuevos['tipo_documento'] = nuevo_tipo_doc

    nombres = Prompt.ask(f"Nombres ({paciente_actual['nombres']})", default=paciente_actual['nombres'])
    if nombres != paciente_actual['nombres']:
        datos_nuevos['nombres'] = nombres

    apellidos = Prompt.ask(f"Apellidos ({paciente_actual['apellidos']})", default=paciente_actual['apellidos'])
    if apellidos != paciente_actual['apellidos']:
        datos_nuevos['apellidos'] = apellidos

    direccion = Prompt.ask(f"Direcci√≥n ({paciente_actual['direccion']})", default=paciente_actual['direccion'])
    if direccion != paciente_actual['direccion']:
        datos_nuevos['direccion'] = direccion

    telefono = IntPrompt.ask(f"Tel√©fono ({paciente_actual['telefono']})", default=int(paciente_actual['telefono']))
    if telefono != int(paciente_actual['telefono']):
        datos_nuevos['telefono'] = telefono

    if not datos_nuevos:
        console.print("\n[yellow]No se modific√≥ ning√∫n dato.[/yellow]")
        input("\nPresione Enter para continuar...")
        return

    paciente_actualizado = paciente.actualizar_paciente(filepath, str(documento), datos_nuevos)
    if paciente_actualizado:
        console.print(Panel("‚úÖ ¬°Datos actualizados con √©xito!", border_style="green", title="√âxito"))
    else:
        console.print(Panel("‚ùå Error al actualizar.", border_style="red", title="Error"))
    input("\nPresione Enter para continuar...")


def menu_eliminar_paciente(filepath: str):
    """
    Est√° funci√≥n permite eliminar un m√©dico existente.
    
    Args:
        filepath (str): La ruta al archivo donde se almacenan los m√©dicos.
    Returns:        
        none
    """
    console.print(Panel.fit("[bold cyan]üóë Eliminar Paciente[/bold cyan]"))
    documento = IntPrompt.ask("Ingrese el Documento del paciente a eliminar")

    paciente_encontrado = paciente.buscar_paciente_por_documento(filepath, str(documento))
    if not paciente_encontrado:
        console.print("\n[bold red]‚ùå No se encontr√≥ el paciente.[/bold red]")
        input("\nPresione Enter para continuar...")
        return

    confirmacion = Confirm.ask(
        f"¬øDesea eliminar a [bold]{paciente_encontrado['nombres']} {paciente_encontrado['apellidos']}[/bold]?",
        default=False
    )

    if confirmacion:
        if paciente.eliminar_paciente(filepath, str(documento)):
            console.print(Panel("‚úÖ ¬°Paciente eliminado con √©xito!", border_style="green", title="√âxito"))
        else:
            console.print(Panel("‚ùå Error al eliminar.", border_style="red", title="Error"))
    else:
        console.print("\n[yellow]Operaci√≥n cancelada.[/yellow]")
    input("\nPresione Enter para continuar...")


# =========================================================
# üîπ Men√∫ Principal Interactivo
# =========================================================
def main_vista_pacientes():
    """
    Funci√≥n principal para manejar el men√∫ de pacientes.
    
    Args:
        none
    Returns:
        none
    """
    archivo = elegir_almacenamiento()
    console.print(f"\n[bold green]Usando archivo:[/bold green] {archivo}")

    opciones = [
        "‚ûï Registrar un nuevo paciente",
        "üìÑ Ver todos los pacientes",
        "‚úèÔ∏è Actualizar datos de un paciente",
        "‚ùå Eliminar un paciente",
        "‚¨ÖÔ∏è Volver al men√∫ principal"
    ]

    while True:
        seleccion = selector_interactivo("M√ìDULO DE PACIENTES\nUsa ‚Üë ‚Üì y Enter para seleccionar", opciones)

        if seleccion == 0:
            menu_crear_paciente(archivo)
        elif seleccion == 1:
            menu_leer_pacientes(archivo)
        elif seleccion == 2:
            menu_actualizar_paciente(archivo)
        elif seleccion == 3:
            menu_eliminar_paciente(archivo)
        elif seleccion == 4:
            console.print("\n[bold red]‚¨Ö Volviendo al men√∫ principal...[/bold red]")
            break


# =========================================================
# üîπ Ejecuci√≥n directa (para pruebas)
# =========================================================
if __name__ == "__main__":
    main_vista_pacientes()
    main_vista_pacientes()
