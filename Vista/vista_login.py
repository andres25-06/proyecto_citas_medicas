import json
import os
import random
import re
import string
import time

import readchar
from rich.align import Align
from rich.console import Console
from rich.live import Live
from rich.panel import Panel
from rich.progress import BarColumn, Progress, TextColumn
from rich.table import Table
from rich.text import Text
from rich.theme import Theme

# =====================================================================
# CONFIGURACI√ìN DE CR√âDITOS Y DATOS DEL PROYECTO
# =====================================================================
DATOS_PROYECTO = {
    "nombre": "SISTEMA DE GESTI√ìN CITAS MEDICAS",
    "numero_ficha": "2993648",
    "programa": "AN√ÅLISIS Y DESARROLLO DE SOFTWARE",
    "version": "1.0.0",
}

DESARROLLADORES = [
    "Developer 1 - Backend", "EIDER ANDRES ARDILA PITA",
    "Developer 2 - Frontend", "JIMY SEBASTIAN ANGARITA TRIANA",
    "Developer 3 - Archivos Planos", "MARIA KAMILA FUENTES VARGAS",
    "Developer 4 - QA y Test", "SERGIO ALEJANDRO GARCIA SOSA"
]

ASESORES = [
    "Instructor ", "ANDRES FELIPE SANDOVAL",
    "Instructor ", "DIEGO OJEDA"

]

# =====================================================================
# CONFIGURACI√ìN DE CONSOLA Y TEMA
# =====================================================================
custom_theme = Theme({
    "title": "bold white on blue",
    "menu": "cyan",
    "selected_normal": "bold white on blue",
    "selected_danger": "bold white on red",
    "danger": "red",
    "ok": "green",
    "warn": "yellow",
    "error": "bold red"
})
console = Console(theme=custom_theme)

DATA_PATH = "data/usuarios.json"
CORREOS_SIMULADOS = "data/correos_simulados.txt"

# =====================================================================
# UTILIDADES GENERALES
# =====================================================================
def limpiar():
    """
    Est√° funci√≥n limpia la consola seg√∫n el sistema operativo.
    Adem√°s, mejora la legibilidad del c√≥digo.
    Args:
        None
    Returns:
        None
    """
    os.system("cls" if os.name == "nt" else "clear")

def asegurar_data():
    """Asegura que el archivo de datos de usuarios exista.
    Args:
        None
    Returns:
        None
    """
    os.makedirs("data", exist_ok=True)
    if not os.path.exists(DATA_PATH):
        admin = [{
            "usuario": "admin",
            "contrasena": "1234",
            "rol": "superadmin",
            "activo": True,
            "correo": "admin@hospital.com"
        }]
        with open(DATA_PATH, "w", encoding="utf-8") as f:
            json.dump(admin, f, indent=4, ensure_ascii=False)

def leer_usuarios():
    """
    Encargada de leer los usuarios desde el archivo JSON.
    Args:
        None
    Returns:
        List[Dict[str, Any]]: Lista de usuarios.
    """
    asegurar_data()
    with open(DATA_PATH, "r", encoding="utf-8") as f:
        return json.load(f)

def guardar_usuarios(u):
    """
    Encargada de guardar los usuarios en el archivo JSON.
    Args:
        u (List[Dict[str, Any]]): Lista de usuarios a guardar.
    Returns:
        None
    """
    with open(DATA_PATH, "w", encoding="utf-8") as f:
        json.dump(u, f, indent=4, ensure_ascii=False)

def generar_codigo():
    """
    Encargada de generar un c√≥digo aleatorio de 6 caracteres
    para recuperaci√≥n de contrase√±a.
    Args:
        None
    Returns:
        str: C√≥digo generado.
    """
    return "".join(random.choices(
        string.ascii_uppercase + string.digits, k=6))

def enviar_correo_simulado(dest, asunto, mensaje):
    """
    Est√° funci√≥n simula el env√≠o de un correo
    guardando el contenido en un archivo de texto.
    Args:
        dest (str): Destinatario del correo.
        asunto (str): Asunto del correo.
        mensaje (str): Cuerpo del correo.
    Returns:
        None
    """
    os.makedirs("data", exist_ok=True)
    with open(CORREOS_SIMULADOS, "a", encoding="utf-8") as f:
        f.write(f"Para: {dest}\nAsunto: {asunto}\n{mensaje}\n{'-'*40}\n")

# =====================================================================
# FUNCIONES DE SPLASH Y CR√âDITOS
# =====================================================================
def mostrar_splash_rapido():
    """Versi√≥n r√°pida del splash al iniciar."""
    limpiar()

    tabla_rapida = Table.grid(padding=(0, 2))
    tabla_rapida.add_column(justify="center", style="cyan")

    tabla_rapida.add_row("[bold cyan]üíä " + DATOS_PROYECTO["nombre"] + " üíä[/bold cyan]")
    tabla_rapida.add_row("[yellow]v" + DATOS_PROYECTO["version"] + "[/yellow]")
    tabla_rapida.add_row("")
    tabla_rapida.add_row(f"[dim]{DATOS_PROYECTO['programa']}[/dim]")
    tabla_rapida.add_row(f"[dim]Ficha: {DATOS_PROYECTO['numero_ficha']}[/dim]")

    panel = Panel(
        tabla_rapida,
        border_style="bright_blue",
        padding=(2, 4)
    )

    console.print(Align.center(panel))
    time.sleep(2)
    limpiar()

def mostrar_splash_creditos():
    """Muestra una pantalla elegante con los cr√©ditos del proyecto."""
    limpiar()

    # Tabla principal con informaci√≥n del proyecto
    tabla_proyecto = Table.grid(padding=(0, 2))
    tabla_proyecto.add_column(justify="center", style="cyan")

    tabla_proyecto.add_row("[bold cyan]üíä " + DATOS_PROYECTO["nombre"] + " üíä[/bold cyan]")
    tabla_proyecto.add_row("")
    tabla_proyecto.add_row(f"[yellow]Versi√≥n:[/yellow] [bold]{DATOS_PROYECTO['version']}[/bold]")
    tabla_proyecto.add_row("")

    panel_proyecto = Panel(
        tabla_proyecto,
        title="[bold white on blue]üìã INFORMACI√ìN DEL PROYECTO[/bold white on blue]",
        border_style="bright_blue",
        padding=(1, 2)
    )

    # Tabla de informaci√≥n acad√©mica
    tabla_academica = Table.grid(padding=(0, 1))
    tabla_academica.add_column(style="yellow", width=20)
    tabla_academica.add_column(style="white")

    tabla_academica.add_row("üìå Ficha:", f"[bold]{DATOS_PROYECTO['numero_ficha']}[/bold]")
    tabla_academica.add_row("üéì Programa:", f"[bold]{DATOS_PROYECTO['programa']}[/bold]")

    panel_academica = Panel(
        tabla_academica,
        title="[bold white on blue]üè´ INFORMACI√ìN ACAD√âMICA[/bold white on blue]",
        border_style="bright_blue",
        padding=(1, 2)
    )

    # Tabla de desarrolladores
    tabla_dev = Table.grid(padding=(0, 1))
    tabla_dev.add_column(style="cyan")

    tabla_dev.add_row("[bold cyan]Equipo de Desarrollo:[/bold cyan]")
    tabla_dev.add_row("")
    for dev in DESARROLLADORES:
        tabla_dev.add_row(f"  ‚ú¶ {dev}")

    panel_dev = Panel(
        tabla_dev,
        title="[bold white on blue]üë®‚Äçüíª DESARROLLADORES[/bold white on blue]",
        border_style="bright_blue",
        padding=(1, 2)
    )

    # Tabla de asesores
    tabla_asesores = Table.grid(padding=(0, 1))
    tabla_asesores.add_column(style="green")

    tabla_asesores.add_row("[bold green]Bajo la asesor√≠a de:[/bold green]")
    tabla_asesores.add_row("")
    for asesor in ASESORES:
        tabla_asesores.add_row(f"  ‚òÖ {asesor}")

    panel_asesores = Panel(
        tabla_asesores,
        title="[bold white on green]üéØ ASESORES[/bold white on green]",
        border_style="bright_green",
        padding=(1, 2)
    )

    # Mostrar todo
    console.print(Align.center(panel_proyecto))
    console.print(Align.center(panel_academica))
    console.print(Align.center(panel_dev))
    console.print(Align.center(panel_asesores))

    # Pie de p√°gina
    pie = Text("Presiona ENTER para continuar...", justify="center")
    pie.stylize("italic yellow")
    console.print(pie)

    # Esperar a que presione ENTER
    input()
    limpiar()

# =====================================================================
# VALIDACI√ìN DE CONTRASE√ëA (solo para registro)
# =====================================================================
def evaluar_contrasena(passw: str) -> dict:
    """
    Eval√∫a la seguridad de la contrase√±a.
    Args:
        passw (str): Contrase√±a a evaluar.
    Returns:
        dict: Resultado de la evaluaci√≥n con reglas y puntaje.
    """
    reglas = {
        "min_length": len(passw) >= 8,
        "has_lower": bool(re.search(r"[a-z]", passw)),
        "has_upper": bool(re.search(r"[A-Z]", passw)),
        "has_digit": bool(re.search(r"\d", passw)),
        "has_special": bool(
            re.search(
                r"[!@#$%^&*()_+\-=\[\]{};':\"\\|,.<>\/?`~]", passw)),
    }
    score = sum(reglas.values())
    return {"reglas": reglas, "score": score, "max": len(reglas)}

def nivel_seguridad(score: int, max_score: int) -> tuple[str, int]:
    """
    Eval√∫a el nivel de seguridad basado en el puntaje.
    Args:
        score (int): Puntaje obtenido.
        max_score (int): Puntaje m√°ximo posible.
    Returns:
        tuple[str, int]: Nivel de seguridad y porcentaje.
    """
    porcentaje = int((score / max_score) * 100)
    if score <= 2:
        return ("D√©bil", porcentaje)
    elif score (3, 4):
        return ("Media", porcentaje)
    else:
        return ("Fuerte", porcentaje)

def construir_panel(masked: str, evaluacion: dict) -> Panel:
    """
    Crea panel visual de la contrase√±a.
    Args:
        masked (str): Contrase√±a en
        evaluacion (dict): Resultado de la evaluaci√≥n.
    Returns:
        Panel: Panel de Rich con la evaluaci√≥n visual.
    """
    reglas = evaluacion["reglas"]
    score = evaluacion["score"]
    max_score = evaluacion["max"]
    estado, pct = nivel_seguridad(score, max_score)

    check = lambda x: "[green]‚úî[/green]" if x else "[red]‚úñ[/red]"
    tabla = Table.grid(padding=(0, 1))
    tabla.add_column(justify="left")
    tabla.add_column(justify="left")
    tabla.add_row("Contrase√±a:", f"[bold]{masked}[/bold]")
    tabla.add_row("Nivel:", f"[bold]{estado}[/bold] ({pct}%)")
    tabla.add_row("", "")
    tabla.add_row(check(reglas["min_length"]),
                "M√≠nimo 8 caracteres")
    tabla.add_row(check(reglas["has_lower"]),
                "Al menos una letra min√∫scula")
    tabla.add_row(check(reglas["has_upper"]),
                "Al menos una letra may√∫scula")
    tabla.add_row(check(reglas["has_digit"]),
                "Al menos un n√∫mero")
    tabla.add_row(check(reglas["has_special"]),
                "Al menos un caracter especial")

    progress = Progress(
        TextColumn("{task.description}"),
        BarColumn(bar_width=None),
        TextColumn(
            "[progress.percentage]{task.percentage:>3.0f}%"),
        expand=True,
        transient=True,
    )
    progress.add_task(
        "[bold]Seguridad:[/bold]", total=max_score, completed=score)

    contenedor = Table.grid()
    contenedor.add_row(tabla)
    contenedor.add_row(progress)

    return Panel(
        contenedor, title="[bold cyan]Validaci√≥n de contrase√±a[/bold cyan]",
        border_style="cyan")

def input_oculto_registro(prompt="Contrase√±a: ", require_strong=False):
    """
    Entrada oculta con validaci√≥n visual (solo para registro).
    Args:
        prompt (str): Texto del prompt.
    Returns:
        str: Contrase√±a ingresada.
    """
    contrasena = ""
    console.print(prompt, end="", style="menu")

    with Live(refresh_per_second=12, console=console) as live:
        while True:
            masked = "*" * len(contrasena)
            evaluacion = evaluar_contrasena(contrasena)
            panel = construir_panel(masked, evaluacion)
            live.update(panel)

            ch = readchar.readchar()
            if ch in ("\r", "\n"):
                if require_strong and evaluacion["score"] < evaluacion["max"]:
                    console.print(
                        "\n[red]La contrase√±a a√∫n no cumple los requisitos.[/red]")
                    time.sleep(1)
                    console.print(prompt, end="", style="menu")
                    continue
                print()
                return contrasena
            elif ch in ("\x08", "\x7f"):
                contrasena = contrasena[:-1]
            elif ch == "\x03":
                raise KeyboardInterrupt
            elif len(contrasena) < 128:
                contrasena += ch

# =====================================================================
# INPUT OCULTO SIMPLE (para iniciar sesi√≥n)
# =====================================================================
def input_oculto_simple(prompt="Contrase√±a: "):
    """
    Entrada oculta simple con asteriscos visibles.
    Args:
        prompt (str): Texto del prompt.
    Returns:
        str: Contrase√±a ingresada.
    """
    contrasena = ""
    console.print(prompt, end="", style="menu")
    while True:
        ch = readchar.readchar()
        # ENTER
        if ch in ("\r", "\n"):
            print()
            return contrasena
        # BACKSPACE
        elif ch in ("\x08", "\x7f"):
            if contrasena:
                contrasena = contrasena[:-1]
                # borra el √∫ltimo asterisco visualmente
                print("\b \b", end="", flush=True)
        # CTRL+C
        elif ch == "\x03":
            raise KeyboardInterrupt
        # CARACTER NORMAL
        elif len(contrasena) < 128:
            contrasena += ch
            # muestra asterisco visual
            print("*", end="", flush=True)

# =====================================================================
# RENDER DEL CUADRO DE LOGIN
# =====================================================================
def cuadro_login_render(opciones, seleccion):
    """
    Estructura y muestra el cuadro de login con opciones.
    Args:
        opciones (List[str]): Lista de opciones del men√∫.
        seleccion (int): √çndice de la opci√≥n seleccionada.
    Returns:
        None
    """
    lines = []
    for i, op in enumerate(opciones):
        is_selected = (i == seleccion)
        if any(k in op.lower() for k in ("salir", "eliminar", "borrar")):
            if is_selected:
                lines.append(f"[selected_danger]  ‚ñ∂ {op}[/selected_danger]")
            else:
                lines.append(f"[danger]  {op}[/danger]")
        elif is_selected:
            lines.append(f"[selected_normal]  ‚ñ∂ {op}[/selected_normal]")
        else:
            lines.append(f"[menu]  {op}[/menu]")
    contenido = "\n".join(lines)
    panel = Panel(Align.center(contenido),
                title="[bold cyan]üíä INGRESO AL SISTEMA -"
                " CUADRO DE LOGIN üíä[/bold cyan]",
                border_style="bright_blue", width=60, padding=(1, 3))
    console.print(Align.center(panel))

def selector_con_flechas(opciones):
    """
    Estructura el selector de opciones con flechas.
    Args:
        opciones (List[str]): Lista de opciones del men√∫.
    Returns:
        int: √çndice de la opci√≥n seleccionada.
    """
    seleccion = 0
    while True:
        limpiar()
        cuadro_login_render(opciones, seleccion)
        key = readchar.readkey()
        if key == readchar.key.UP:
            seleccion = (seleccion - 1) % len(opciones)
        elif key == readchar.key.DOWN:
            seleccion = (seleccion + 1) % len(opciones)
        elif key == readchar.key.ENTER:
            return seleccion

# =====================================================================
# FUNCIONALIDADES DE LOGIN
# =====================================================================
def registrar_usuario():
    """
    Est√° funci√≥n gestiona el registro de un nuevo usuario.
    Args:
        None
    Returns:
        None
    """
    limpiar()
    console.print(Panel(
        "[bold yellow]üßæ Registro de nuevo usuario[/bold yellow]",
        border_style="bright_yellow", width=60))
    usuario = console.input(
        "Nombre de usuario: ").strip()
    correo = console.input(
        "Correo (opcional, para recuperaci√≥n): ").strip()
    contrasena = input_oculto_registro(
        "Contrase√±a: ", require_strong=True)
    confirmar = input_oculto_registro("Confirmar contrase√±a: ")

    if contrasena != confirmar:
        console.print(
            "[error]‚ùå Las contrase√±as no coinciden.[/error]")
        time.sleep(1.5)
        return

    if not usuario or not contrasena:
        console.print(
            "[warn]‚ùó Usuario y contrase√±a son obligatorios.[/warn]")
        time.sleep(1.5)
        return

    usuarios = leer_usuarios()
    if any(u["usuario"] == usuario for u in usuarios):
        console.print("[error]‚ùå Ya existe ese nombre de usuario.[/error]")
        time.sleep(1.5)
        return

    usuarios.append({
        "usuario": usuario,
        "contrasena": contrasena,
        "correo": correo,
        "rol": "usuario",
        "activo": False
    })
    guardar_usuarios(usuarios)
    console.print("[ok]‚úÖ Registro completado. Espera aprobaci√≥n del superadmin.[/ok]")
    time.sleep(1.8)

def validar_credenciales(usuario, contrasena):
    """
    Encargada de validar las credenciales de inicio de sesi√≥n.
    Args:
        usuario (str): Nombre de usuario.
        contrasena (str): Contrase√±a.
    Returns:
        dict|str|None: Diccionario del usuario si es v√°lido,
        "pendiente" si est√° inactivo, None si no es v√°lido.
    """
    usuarios = leer_usuarios()
    for u in usuarios:
        if u["usuario"] == usuario and u["contrasena"] == contrasena:
            if not u.get("activo", False):
                return "pendiente"
            return u
    return None

def recuperar_contrasena():
    """
    Est√° funci√≥n gestiona la recuperaci√≥n de contrase√±a.
    Args:
        None
    Returns:
        None
    """
    limpiar()
    console.print(Panel(
        "[bold yellow]üîë Recuperaci√≥n de contrase√±a[/bold yellow]",
        border_style="bright_yellow", width=60))
    usuario = console.input("Nombre de usuario: ").strip()
    usuarios = leer_usuarios()
    for u in usuarios:
        if u["usuario"] == usuario:
            codigo = generar_codigo()
            u["contrasena"] = codigo
            guardar_usuarios(usuarios)
            if u.get("correo"):
                enviar_correo_simulado(
                    u["correo"], "Recuperaci√≥n de contrase√±a",
                    f"Tu nueva contrase√±a temporal es: {codigo}")
            console.print(
                "[ok]‚úÖ Contrase√±a temporal generada"
                " para '{usuario}': [bold]{codigo}[/bold][/ok]")
            console.print(
                "[warn](Se ha simulado env√≠o si ten√≠as correo registrado)[/warn]")
            time.sleep(2.5)
            return
    console.print("[error]‚ùå Usuario no encontrado.[/error]")
    time.sleep(1.5)

# =====================================================================
# INICIAR SESI√ìN
# =====================================================================
def iniciar_sesion():
    """
    Est√° funci√≥n gestiona el inicio de sesi√≥n.
    Args:
        None
    Returns:
        dict|None: Diccionario del usuario si inicio exitoso,
        None si fall√≥.
    """
    limpiar()
    console.print(Panel(
        "[bold cyan]üîê Iniciar sesi√≥n[/bold cyan]",
        border_style="bright_blue", width=60))
    usuario = console.input("Nombre de usuario: ").strip()
    contrasena = input_oculto_simple("Contrase√±a: ")

    resultado = validar_credenciales(usuario, contrasena)
    if resultado == "pendiente":
        console.print(
            "[warn]‚ö† Tu cuenta est√° pendiente de aprobaci√≥n por el superadmin.[/warn]")
        time.sleep(1.8)
        return None
    if resultado:
        console.print(f"[ok]‚úÖ Bienvenido {usuario}![/ok]")
        time.sleep(1)
        return resultado
    console.print("[error]‚ùå Usuario o contrase√±a incorrectos.[/error]")
    time.sleep(1.5)
    return None

# =====================================================================
# FUNCI√ìN PRINCIPAL DEL LOGIN
# -------------------------------------------------------------



def login():
    """
    Est√° funci√≥n gestiona el flujo principal del login.
    Args:
        None
    Returns:
        dict|None: Diccionario del usuario si inicio exitoso,
        None si el usuario decide salir.
    """
    from Vista.vista_superadmin import panel_superadmin
    asegurar_data()
    opciones = ["Iniciar sesi√≥n", "Registrarse", "Recuperar contrase√±a", "Ver Cr√©ditos", "Salir"]
    while True:
        idx = selector_con_flechas(opciones)
        opcion = opciones[idx]
        if opcion == "Iniciar sesi√≥n":
            usuario = iniciar_sesion()
            if usuario:
                if usuario.get("rol") == "superadmin":
                    panel_superadmin(usuario)
                return usuario
        elif opcion == "Registrarse":
            registrar_usuario()
        elif opcion == "Recuperar contrase√±a":
            recuperar_contrasena()
        elif opcion == "Ver Cr√©ditos":
            mostrar_splash_creditos()
        elif opcion == "Salir":
            limpiar()
            console.print(Panel(
                "[bold red]üëã Saliendo del sistema...[/bold red]",
                border_style="red", width=60))
            time.sleep(1)
            exit()

# =====================================================================
# EJECUTAR EL LOGIN
# =====================================================================
if __name__ == "__main__":
    login()
