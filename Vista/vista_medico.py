# -- coding: utf-8 --
"""
Vista del M√≥dulo de M√©dicos con selector interactivo (flechas ‚Üë ‚Üì)
y dise√±o mejorado con emojis para el CRUD.
"""

import os
import time
import json
import csv

import readchar
from rich.console import Console
from rich.panel import Panel
from rich.prompt import Confirm, IntPrompt, Prompt
from rich.table import Table

from Modelo import medico
from Validaciones import entrada_datos, validar_campos
from Vista import navegacion

console = Console()

DIRECTORIO_DATOS = 'data'
NOMBRE_ARCHIVO_CSV = 'medicos.csv'
NOMBRE_ARCHIVO_JSON = 'medicos.json'


# =========================================================
# üîπ Funciones Auxiliares
# =========================================================
def limpiar():
    """
        Limpia la consola seg√∫n el sistema operativo.
        
        Args:
            none
        Returns:
            none
    """
    os.system("cls" if os.name == "nt" else "clear")


def elegir_almacenamiento() -> str:
    limpiar()
    """
        Seleccionar tipo de almacenamiento (CSV o JSON) usando el selector interactivo.
        
        Args:
            none
        Returns:    
            str: Ruta del archivo seleccionado para almacenamiento.
            
    """
    opciones = [
        "üìÑ CSV (Archivo de texto plano)",
        "üßæ JSON (Formato estructurado)",
        "üîô Volver al men√∫ principal"
    ]

    seleccion = selector_interactivo("‚öôÔ∏è Configuraci√≥n de Almacenamiento", opciones)

    if seleccion == 0:
        console.print("[bold green]‚úÖ Modo de almacenamiento seleccionado: CSV[/bold green]")
        time.sleep(1)
        return os.path.join(DIRECTORIO_DATOS, NOMBRE_ARCHIVO_CSV)

    elif seleccion == 1:
        console.print("[bold green]‚úÖ Modo de almacenamiento seleccionado: JSON[/bold green]")
        time.sleep(1)
        return os.path.join(DIRECTORIO_DATOS, NOMBRE_ARCHIVO_JSON)

    elif seleccion == 2:
        console.print("[bold red]‚Ü© Regresando al men√∫ principal...[/bold red]")
        time.sleep(1)
        navegacion.ir_a_menu_principal()
        return None


# =========================================================
# üîπ Selector Interactivo
# =========================================================
def selector_interactivo(titulo, opciones):
    """
        Permite navegar con flechas ‚Üë ‚Üì y seleccionar con Enter.
        
        Args:
            titulo (str): T√≠tulo del men√∫.
            opciones (List[str]): Lista de opciones para mostrar.
        Returns:
            int: √çndice de la opci√≥n seleccionada.
    """

    seleccion = 0
    while True:
        limpiar()
        console.print(Panel(f"[bold cyan]{titulo}[/bold cyan]"))
        for i, opt in enumerate(opciones):
            prefix = "üëâ " if i == seleccion else "   "
            # Verde para opciones normales, rojo si es ‚Äúvolver‚Äù
            if "Volver" in opt:
                estilo = "reverse bold red" if i == seleccion else "bold red"
            else:
                estilo = "reverse bold green" if i == seleccion else ""
            console.print(prefix + opt, style=estilo)

        tecla = readchar.readkey()
        if tecla == readchar.key.UP:
            seleccion = (seleccion - 1) % len(opciones)
        elif tecla == readchar.key.DOWN:
            seleccion = (seleccion + 1) % len(opciones)
        elif tecla == readchar.key.ENTER:
            return seleccion


# =========================================================
# üîπ Funciones del M√≥dulo de M√©dicos
# =========================================================

def solicitar_tipo_documento(permitir_vacio: bool = False) -> str | None:
    limpiar()
    """
        Permite seleccionar el tipo de documento usando el selector interactivo, con opci√≥n de volver.
        
        Args:
            permitir_vacio (bool): Si es True, permite no cambiar el tipo de documento.
        Returns:    
            str | None: Tipo de documento seleccionado o None si no se cambia.
            
    """
    tipos = {
        '1': 'C.C',
        '2': 'T.I',
        '3': 'R.C',
        '4': 'C.E',
        '5': 'Pasaporte',
        '6': 'PPT'
    }

    descripciones = {
        '1': 'üÜî C√©dula de Ciudadan√≠a',
        '2': 'üé´ Tarjeta de Identidad',
        '3': 'üìú Registro Civil',
        '4': 'üåé C√©dula de Extranjer√≠a',
        '5': 'üß≥ Pasaporte',
        '6': 'üìÑ Permiso de Permanencia Temporal'
    }

    opciones = [desc for desc in descripciones.values()]

    if permitir_vacio:
        opciones.insert(0, "üî∏ No cambiar")

    opciones.append("üîô Volver al men√∫ anterior")

    seleccion = selector_interactivo("üìë Seleccione el tipo de documento", opciones)

    if permitir_vacio and seleccion == 0:
        console.print("[bold yellow]‚ö† No se modificar√° el tipo de documento.[/bold yellow]")
        time.sleep(1)
        return None

    # Si selecciona "Volver"
    if seleccion == len(opciones) - 1:
        console.print("[bold red]‚Ü© Regresando al men√∫ anterior...[/bold red]")
        time.sleep(1)
        return elegir_almacenamiento()

    indice_real = seleccion if not permitir_vacio else seleccion - 1
    codigo = str(indice_real + 1)
    tipo = tipos[codigo]

    console.print(f"[bold green]‚úÖ Tipo seleccionado:[/bold green] {descripciones[codigo]}")
    time.sleep(1)
    return tipo


# =========================================================
# üîπ Especialidades del Medico
# =========================================================

def solicitar_especialidad_medica(permitir_vacio: bool = False) -> str | None:
    """
        Permite seleccionar la especialidad m√©dica de un m√©dico usando un men√∫ interactivo.

        Args:
            permitir_vacio (bool): Si es True, permite no cambiar la especialidad.
        Returns:
            str | None: Especialidad seleccionada o None si no se cambia.
    """
    limpiar()
    especialidades = {
        '1': 'Medicina General',
        '2': 'Pediatr√≠a',
        '3': 'Ginecolog√≠a y Obstetricia',
        '4': 'Medicina Interna',
        '5': 'Cardiolog√≠a',
        '6': 'Dermatolog√≠a',
        '7': 'Oftalmolog√≠a',
        '8': 'Otorrinolaringolog√≠a',
        '9': 'Traumatolog√≠a y Ortopedia',
        '10': 'Neurolog√≠a',
        '11': 'Psiquiatr√≠a',
        '12': 'Urolog√≠a',
        '13': 'Gastroenterolog√≠a',
        '14': 'Endocrinolog√≠a',
        '15' : 'Odontologia'
    }

    descripciones = {
        '1': 'ü©∫ Medicina General',
        '2': 'üë∂ Pediatr√≠a',
        '3': 'üë©‚Äçüçº Ginecolog√≠a y Obstetricia',
        '4': 'üè• Medicina Interna',
        '5': '‚ù§Ô∏è Cardiolog√≠a',
        '6': 'üåø Dermatolog√≠a',
        '7': 'üëÅÔ∏è Oftalmolog√≠a',
        '8': 'üëÇ Otorrinolaringolog√≠a',
        '9': 'ü¶¥ Traumatolog√≠a y Ortopedia',
        '10': 'üß† Neurolog√≠a',
        '11': 'üí¨ Psiquiatr√≠a',
        '12': 'üöπ Urolog√≠a',
        '13': 'üçΩÔ∏è Gastroenterolog√≠a',
        '14': 'üî¨ Endocrinolog√≠a',
        '15': 'ü¶∑Odontologia'
    }

    opciones = [desc for desc in descripciones.values()]

    if permitir_vacio:
        opciones.insert(0, "üî∏ No cambiar especialidad")


    seleccion = selector_interactivo("üè• Seleccione la especialidad m√©dica", opciones)

    # Si permite dejar vac√≠o
    if permitir_vacio and seleccion == 0:
        console.print("[bold yellow]‚ö† No se modificar√° la especialidad m√©dica.[/bold yellow]")
        time.sleep(1)
        return None

    indice_real = seleccion if not permitir_vacio else seleccion - 1
    codigo = str(indice_real + 1)
    especialidad = especialidades[codigo]

    console.print(f"[bold green]‚úÖ Especialidad seleccionada:[/bold green] {descripciones[codigo]}")
    time.sleep(1)
    return especialidad

# =========================================================
# üîπ Especialidades del Medico
# =========================================================

def estado_medico(permitir_vacio: bool = False) -> str | None:
    """
        Permite seleccionar el estado del m√©dico (Activo o Inactivo) usando un selector interactivo.

        Args:
            permitir_vacio (bool): Si es True, permite no cambiar el estado actual.
        Returns:    
            str | None: Estado seleccionado o None si no se cambia.
    """
    tipos = {
        '1': 'Activo',
        '2': 'Inactivo'
    }

    descripciones = {
        '1': '‚úÖ Activo',
        '2': '‚ùå Inactivo'
    }

    opciones = [desc for desc in descripciones.values()]

    if permitir_vacio:
        opciones.insert(0, "üî∏ No cambiar")

    seleccion = selector_interactivo("üìã Seleccione el estado del m√©dico", opciones)

    # Si se permite dejar vac√≠o y se elige "No cambiar"
    if permitir_vacio and seleccion == 0:
        console.print("[bold yellow]‚ö† No se modificar√° el estado del m√©dico.[/bold yellow]")
        time.sleep(1)
        return None

    # Calcular √≠ndice real seg√∫n si se permiti√≥ vac√≠o
    indice_real = seleccion if not permitir_vacio else seleccion - 1
    codigo = str(indice_real + 1)

    # Obtener el estado correspondiente
    estado = tipos[codigo]

    console.print(f"[bold green]‚úÖ Estado seleccionado:[/bold green] {descripciones[codigo]}")
    time.sleep(1)
    return estado


def leer_datos_archivo(filepath):
    """
    Lee datos desde un archivo JSON o CSV.
    Retorna una lista de diccionarios o lista vac√≠a si hay error.
    """
    if not os.path.exists(filepath):
        return []

    try:
        if filepath.endswith(".json"):
            with open(filepath, "r", encoding="utf-8") as f:
                return json.load(f)
        elif filepath.endswith(".csv"):
            with open(filepath, "r", encoding="utf-8") as f:
                return list(csv.DictReader(f))
    except Exception:
        return []
    return []


def buscar_medicos(filepath_base, documento=None, especialidad=None):
    """
    Busca m√©dicos por documento o especialidad en JSON o CSV.
    Si ambos est√°n vac√≠os, retorna lista vac√≠a.
    """
    documento = str(documento or "").strip()
    especialidad = str(especialidad or "").strip().lower()

    # Archivos posibles
    base, ext = os.path.splitext(filepath_base)
    if ext not in (".json", ".csv"):
        rutas = [f"{base}.json", f"{base}.csv"]
    else:
        rutas = [filepath_base]

    resultados = []
    for ruta in rutas:
        if not os.path.exists(ruta):
            continue

        medicos = leer_datos_archivo(ruta)
        for m in medicos:
            doc = str(m.get("documento", "")).strip()
            esp = str(m.get("especialidad", "")).strip().lower()

            # Buscar por documento
            if documento and doc == documento:
                resultados.append(m)
            # Buscar por especialidad
            elif especialidad and esp == especialidad:
                resultados.append(m)

    return resultados


def menu_crear_medico(filepath: str):
    """
        Permite registrar un nuevo m√©dico en el sistema.

        Args:
            filepath (str): Ruta del archivo donde se almacenan los m√©dicos.
        Returns:
            None
    """
    limpiar()
    console.print(Panel.fit("[bold cyan]‚ûïü©∫ Registrar Nuevo M√©dico[/bold cyan]"))

    # --- Entradas con validaciones ---
    tipo_documento = solicitar_tipo_documento()
    documento = validar_campos.validar_cedula("N√∫mero de Documento", filepath)
    nombres = validar_campos.validar_texto("Nombres").capitalize()
    apellidos = validar_campos.validar_texto("Apellidos").capitalize()
    especialidad = solicitar_especialidad_medica()
    telefono = validar_campos.validar_telefono("Tel√©fono")
    estado = estado_medico()
    consultorio = validar_campos.validar_numero("N√∫mero de Consultorio")

    # --- Crear diccionario con los datos del m√©dico ---
    nuevo_medico = {
        "tipo_documento": tipo_documento,
        "documento": documento,
        "nombres": nombres,
        "apellidos": apellidos,
        "especialidad": especialidad,
        "telefono": telefono,
        "estado": estado,
        "consultorio": consultorio,
    }

    # --- Validar campos obligatorios ---
    campos_obligatorios = ["tipo_documento", "documento", "nombres", "apellidos", "telefono"]
    if not entrada_datos.validar_datos_relacion_obligatorios(nuevo_medico, campos_obligatorios, "m√©dico"):
        console.print(Panel("‚ö† Faltan datos obligatorios.", border_style="red", title="Error"))
        input("\nPresione Enter para continuar...")
        return

    # --- Crear el m√©dico ---
    medico_creado = medico.crear_medico(
        filepath,
        tipo_documento,
        documento,
        nombres,
        apellidos,
        especialidad,
        telefono,
        estado,
        consultorio
    )

    # --- Confirmaci√≥n ---
    if medico_creado:
        console.print(Panel(
            f"‚úÖ ¬°M√©dico registrado con √©xito!\nID Asignado: [bold yellow]{medico_creado['id']}[/bold yellow]",
            border_style="green",
            title="√âxito"
        ))
    else:
        console.print(Panel("‚ö† No se pudo registrar el m√©dico.", border_style="red", title="Error"))

    input("\nPresione Enter para continuar...")


def menu_leer_medicos(filepath: str):
    """
        Esta funci√≥n permite leer y mostrar todos los m√©dicos registrados.
        
        Args:
            filepath (str): La ruta al archivo donde se almacenan los m√©dicos.
        Returns:        
            none    
            
    """
    limpiar()
    console.print(Panel.fit("[bold cyan]üìÑüë®‚Äç‚öïÔ∏è Lista de M√©dicos[/bold cyan]"))
    medicos = medico.leer_todos_los_medicos(filepath)

    if not medicos:
        console.print("[yellow]No hay m√©dicos registrados.[/yellow]")
        input("\nPresione Enter para continuar...")
        return

    tabla = Table(
        title="M√©dicos Registrados",
        border_style="blue",
        show_header=True,
        header_style="bold magenta"
    )
    tabla.add_column("ID", style="dim", width=5)
    tabla.add_column("Nombre Completo")
    tabla.add_column("Especialidad")
    tabla.add_column("Tel√©fono", justify="right")
    tabla.add_column("Estado", justify="center")
    tabla.add_column("Consultorio", justify="center")

    for m in medicos:
        tabla.add_row(
            m.get('id', 'N/A'),
            f"{m.get('nombres', '')} {m.get('apellidos', '')}",
            m.get('especialidad', 'N/A'),
            m.get('telefono', 'N/A'),
            m.get('estado', 'N/A'),
            m.get('consultorio', 'N/A'),
        )

    console.print(tabla)
    input("\nPresione Enter para continuar...")


def menu_actualizar_medico(filepath: str):
    """
        Est√° funci√≥n permite actualizar los datos de un m√©dico existente.   
        
        Args:
            filepath (str): La ruta al archivo donde se almacenan los m√©dicos.
        Returns:        
            none
    
    """
    console.print(Panel.fit("[bold cyan]‚úèÔ∏èü©∫ Actualizar Datos de M√©dico[/bold cyan]"))
    id_medico = IntPrompt.ask("Ingrese el documento del m√©dico a actualizar")

    medico_actual = medico.buscar_medico_por_documento(filepath, str(id_medico))
    if not medico_actual:
        console.print("\n[bold red]‚ùå No se encontr√≥ ning√∫n m√©dico con ese documento.[/bold red]")
        input("\nPresione Enter para continuar...")
        return

    console.print("\nPresione Enter para no modificar un campo.")
    datos_nuevos = {}

    nombres = Prompt.ask(f"Nombres ({medico_actual['nombres']})", default=medico_actual['nombres'])
    if nombres != medico_actual['nombres']:
        datos_nuevos['nombres'] = nombres

    especialidad = Prompt.ask(f"Especialidad ({medico_actual['especialidad']})", default=medico_actual['especialidad'])
    if especialidad != medico_actual['especialidad']:
        datos_nuevos['especialidad'] = especialidad

    telefono = IntPrompt.ask(f"Tel√©fono ({medico_actual['telefono']})", default=int(medico_actual['telefono']))
    if telefono != int(medico_actual['telefono']):
        datos_nuevos['telefono'] = telefono

    if not datos_nuevos:
        console.print("\n[yellow]No se modific√≥ ning√∫n dato.[/yellow]")
        input("\nPresione Enter para continuar...")
        return

    medico_actualizado = medico.actualizar_medico(filepath, str(id_medico), datos_nuevos)
    if medico_actualizado:
        console.print(Panel("‚úÖ ¬°Datos del m√©dico actualizados con √©xito!", border_style="green", title="√âxito"))
    else:
        console.print(Panel("‚ùå Error al actualizar los datos.", border_style="red", title="Error"))
    input("\nPresione Enter para continuar...")
    
def menu_buscar_medico(filepath_base: str):
    """
    Men√∫ interactivo para buscar m√©dicos por documento o especialidad.
    Funciona con archivos JSON o CSV.
    """
    console = Console()

    # Verificar si hay archivo disponible
    base, ext = os.path.splitext(filepath_base)
    posibles_rutas = [f"{base}.json", f"{base}.csv"] if ext == "" else [filepath_base]
    medicos = []

    for ruta in posibles_rutas:
        if os.path.exists(ruta):
            medicos = leer_datos_archivo(ruta)
            break

    if not medicos:
        console.print("[red]‚ùå No hay m√©dicos registrados o no se encontr√≥ el archivo (.json / .csv).[/red]")
        console.input("\n[cyan]Presione Enter para volver al men√∫...[/cyan]")
        return

    # Entrada de usuario
    console.print("[bold cyan]üîé Buscar m√©dico[/bold cyan]")
    documento = console.input(
        "[cyan]Ingrese el documento o dar enter para buscar por especialidad buscar por especialidad: [/cyan]"
        ).strip()
    especialidad = ""
    if not documento:
        especialidad = console.input("[cyan]Ingrese la especialidad: [/cyan]").strip()

    if not documento and not especialidad:
        console.print("[red]‚ö†Ô∏è Debe ingresar al menos un dato (documento o especialidad).[/red]")
        console.input("\n[cyan]Presione Enter para volver al men√∫...[/cyan]")
        return

    resultados = buscar_medicos(filepath_base, documento, especialidad)

    if resultados:
        tabla = Table(title="Resultados de b√∫squeda")
        tabla.add_column("Documento", justify="center")
        tabla.add_column("Nombre", justify="center")
        tabla.add_column("Especialidad", justify="center")
        tabla.add_column("Tel√©fono", justify="center")
        tabla.add_column("Estado", justify="center")
        tabla.add_column("Consultorio", justify="center")

        for m in resultados:
            nombre = f"{m.get(
                'nombres', m.get('nombre', ''))} {m.get(
                'apellidos', m.get('apellido', ''))
                }".strip()
            tabla.add_row(
                m.get("documento", "N/A"),
                nombre or "Sin nombre",
                m.get("especialidad", "N/A"),
                m.get("telefono", "N/A"),
                m.get("estado", "N/A"),
                m.get("consultorio", "N/A")
            )

        console.print(tabla)
    else:
        console.print("[red]‚ùå No se encontraron m√©dicos con esos datos.[/red]")

    console.input("\n[cyan]Presione Enter para volver al men√∫...[/cyan]")


def menu_eliminar_medico(filepath: str):
    """
        Est√° funci√≥n permite eliminar un m√©dico existente.
        
        Args:
            filepath (str): La ruta al archivo donde se almacenan los m√©dicos.
        Returns:        
            none
    """
    console.print(Panel.fit("[bold cyan]üóëÔ∏è‚ùå Eliminar M√©dico[/bold cyan]"))
    documento = IntPrompt.ask("Ingrese el documento del m√©dico a eliminar")

    medico_encontrado = medico.buscar_medico_por_documento(filepath, str(documento))
    if not medico_encontrado:
        console.print("\n[bold red]‚ùå No se encontr√≥ el m√©dico.[/bold red]")
        input("\nPresione Enter para continuar...")
        return

    confirmacion = Confirm.ask(
        f"¬øEst√° seguro de eliminar al Dr. [bold]{medico_encontrado['nombres']} {medico_encontrado['apellidos']}[/bold]?",
        default=False
    )

    if confirmacion:
        if medico.eliminar_medico(filepath, str(documento)):
            console.print(Panel("‚úÖ ¬°M√©dico eliminado con √©xito!", border_style="green", title="√âxito"))
        else:
            console.print(Panel("‚ùå Error al eliminar.", border_style="red", title="Error"))
    else:
        console.print("\n[yellow]Operaci√≥n cancelada.[/yellow]")
    input("\nPresione Enter para continuar...")


# =========================================================
# üîπ Men√∫ Principal Interactivo
# =========================================================
def main_vista_medicos():
    """
        Es la funci√≥n principal que maneja el men√∫ interactivo del m√≥dulo de m√©dicos.   
        Args:
            none
        Returns:        
            none
            
    """

    limpiar()
    archivo = elegir_almacenamiento()
    console.print(f"\n[bold green]Usando archivo:[/bold green] {archivo}")

    opciones = [
        "‚ûïü©∫ Registrar un nuevo m√©dico",
        "üìÑüë®‚Äç‚öïÔ∏è Ver todos los m√©dicos",
        "‚úèÔ∏èü©π Actualizar datos de un m√©dico",
        "üîé Buscar medico",
        "‚ùåüóëÔ∏è Eliminar un m√©dico",
        "‚¨ÖÔ∏èüîô Volver al men√∫ principal"
    ]

    while True:
        seleccion = selector_interactivo("M√ìDULO DE M√âDICOS\nUsa ‚Üë ‚Üì y Enter para seleccionar", opciones)

        if seleccion == 0:
            menu_crear_medico(archivo)
        elif seleccion == 1:
            menu_leer_medicos(archivo)
        elif seleccion == 2:
            menu_actualizar_medico(archivo)
        elif seleccion == 3:
            menu_buscar_medico(archivo)
        elif seleccion == 4:
            menu_eliminar_medico(archivo)
        elif seleccion == 5:
            console.print("\n[bold red]‚¨Ö Volviendo al men√∫ principal...[/bold red]")
            break


# =========================================================
# üîπ Ejecuci√≥n directa (para pruebas)
# =========================================================
if __name__ == "__main__":
    main_vista_medicos()
